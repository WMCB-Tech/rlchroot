#!/data/data/com.termux/files/usr/bin/bash
### rlc-create - create chroots from tarballs and installs them with templates
### All Rights Reserved @wmcbtech30 (2021)
###
### Supported Distributions:
### * Ubuntu
### * Debian (Buster/Stretch/Sid/Testing)
### * Kali (Rolling)
### * Alpine Linux
### * Arch Linux and Arch Linux ARM
###
### Templates are registered in:
### $PREFIX/var/rlc/distro-templates
RLCHROOT_ROOTFS_DIR="$PREFIX/var/rlc/containers"
RLCHROOT_TEMPLATES="$PREFIX/var/rlc/distro-templates"
RLCHROOT_CACHE="$PREFIX/var/rlc/cache"
DISTRO_NAME="$1"
CHROOT_NAME="$2"

### Colored Environment Variables
RED="$(tput setaf 1)$(tput bold)"
GREEN="$(tput setaf 2)$(tput bold)"
YELLOW="$(tput setaf 3)$(tput bold)"
NOATTR="$(tput sgr0)"

### SIGNAL Trap
sigtrap(){
echo "${RED}Signal Recieved! Exiting as Requested...${NOATTR}"
exit 2
}

trap 'sigtrap' HUP INT KILL QUIT TERM

### Check if running as root
if [ "$(whoami)" == "root" ]; then
	echo "${RED}Running ${YELLOW}rlc-create${RED} as root is discouraged, Aborting Exit Code 2${NOATTR}"
	exit 2
fi

### Check if no argument is specified
if [ $# = 0 ] || [ $1 == "--help" ]; then
	echo "${GREEN}rlc-create: Install Chroots from Tarballs"
	echo ""
	echo "Usage: "
	echo "rlc-create ${YELLOW}[DISTRO-FLAVOR] [CHROOT-NAME]"
	echo ""
	echo "${GREEN}Supported Distributions: "
	echo "${YELLOW} Ubuntu"
	echo " Debian"
	echo " Kali"
	echo " Alpine"
	echo " Arch Linux"
	echo "${GREEN}You can view the list of available flavors with ${YELLOW}rlc-create list${GREEN} command"
	echo ""
	echo "Example Usage: "
	echo "${YELLOW}rlc-create stretch stretchfs"
	echo "rlc-create kali kali-rootfs"
	echo ""
	echo "${GREEN}If you want to delete the container, run ${YELLOW}rlc-destroy${GREEN} command${NOATTR}"
	exit 2
fi

list_distros(){
	echo "${GREEN}Supported Distributions:"
	echo ""
	echo "Debian:"
	echo "${YELLOW}stretch, buster, bullseye, testing, sid"
	echo ""
	echo "${GREEN}Ubuntu:"
	echo "${YELLOW}bionic, focal, groovy, hirsute"
	echo ""
	echo "${GREEN}Kali:"
	echo "${YELLOW}kali (rolling)"
	echo ""
	echo "${GREEN}Alpine:"
	echo "${YELLOW}alpine (stable/3.13)"
	echo ""
	echo "${GREEN}Arch Linux:"
	echo "${YELLOW}archlinux${NOATTR}"
}

### Get Mirror Configuration
source $PREFIX/var/rlc/mirrors.conf

### Distro-Specific Functions
bionic(){
	EXPECT="ubuntu-bionic-$(uname -m).tar.gz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/bionic/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_BIONIC"
	TEMPLATE="$RLCHROOT_TEMPLATES/bionic"
}

focal(){
	EXPECT="ubuntu-focal-$(uname -m).tar.gz"
	STRIP_TARBALL=0
	### Ubuntu 20.04 Drops support for 32-bit anymore
	if [ "$(uname -m)" == "i686" ]; then
		echo "${RED}WARNING: Ubuntu 20.04 Drops support for 32-bit anymore${NOATTR}"
		exit 2
	fi
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/focal/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_FOCAL"
	TEMPLATE="$RLCHROOT_TEMPLATES/focal"
}

groovy(){
	EXPECT="ubuntu-groovy-$(uname -m).tar.gz"
	STRIP_TARBALL=0
	### Ubuntu 20.10 Drops support for 32-bit anymore
	if [ "$(uname -m)" == "i686" ]; then
		echo "${RED}WARNING: Ubuntu 20.10 Drops support for 32-bit anymore${NOATTR}"
		exit 2
	fi
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/groovy/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_GROOVY"
	TEMPLATE="$RLCHROOT_TEMPLATES/groovy"
}

hirsute(){
	EXPECT="ubuntu-hirsute-$(uname -m).tar.gz"
	STRIP_TARBALL=0
	### Ubuntu 21.04 Drops support for 32-bit anymore
	if [ "$(uname -m)" == "i686" ]; then
		echo "${RED}WARNING: Ubuntu 21.04 Drops support for 32-bit anymore${NOATTR}"
		exit 2
	fi
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/hirsute/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_HIRSUTE"
	TEMPLATE="$RLCHROOT_TEMPLATES/hirsute"
}

buster(){
	EXPECT="debian-buster-$(uname -m).tar.xz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/buster/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_BUSTER"
	TEMPLATE="$RLCHROOT_TEMPLATES/buster"
}

stretch(){
	EXPECT="debian-stretch-$(uname -m).tar.xz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/stretch/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_STRETCH"
	TEMPLATE="$RLCHROOT_TEMPLATES/stretch"
}

bullseye(){
	EXPECT="debian-bullseye-$(uname -m).tar.xz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/bullseye/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_BULLSEYE"
	TEMPLATE="$RLCHROOT_TEMPLATES/bullseye"
}

sid(){
	EXPECT="debian-sid-$(uname -m).tar.xz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/sid/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_SID"
	TEMPLATE="$RLCHROOT_TEMPLATES/sid"
}

testing(){
	EXPECT="debian-testing-$(uname -m).tar.xz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/testing/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_TESTING"
	TEMPLATE="$RLCHROOT_TEMPLATES/testing"
}

kali(){
	EXPECT="kali-$(uname -m).tar.xz"
	STRIP_TARBALL=1
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/kali/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_KALI"
	TEMPLATE="$RLCHROOT_TEMPLATES/kali"
}

alpine(){
	EXPECT="alpine-$(uname -m).tar.gz"
	STRIP_TARBALL=0
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/alpine/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	WGET_URL_LINK="$MIRROR_ALPINE"
	TEMPLATE="$RLCHROOT_TEMPLATES/alpine"
}

archlinux(){
	EXPECT="archlinux-$(uname -m).tar.gz"
	if [ "$(uname -m)" == "x86_64" ]; then
		STRIP_TARBALL=1
	else
		STRIP_TARBALL=0
	fi
	### Arch Linux Drops support for 32-bit anymore
	if [ "$(uname -m)" == "i686" ]; then
		echo "${RED}WARNING: Archlinux Drops support for 32-bit anymore${NOATTR}"
		exit 2
	fi
	### Check if Architecture is x86_64 (Arch Linux and Arch Linux ARM are different)
	if [ "$(uname -m)" == "x86_64" ]; then
		ARCHLINUX_SED=1
		wget_filename=$(curl --fail --silent "$MIRROR_ARCHLINUX/iso/latest/md5sums.txt" | grep bootstrap | awk '{ print $2 }')
	fi
	### Declare Configs
	check_arch
	if [ -e "$RLCHROOT_CACHE/archlinux/$EXPECT" ]; then
		DO_NOT_WGET=1
	fi
	### Check for Archlinux Architecture (Download links are different between them)
	if [ "$(uname -m)" == "x86_64" ]; then
		WGET_URL_LINK="$MIRROR_ARCHLINUX/iso/latest/${wget_filename}"
	else
		WGET_URL_LINK="$MIRROR_ARCHLINUX_ARM"
	fi
	TEMPLATE="$RLCHROOT_TEMPLATES/archlinux"
}

### Explicitly Check for Zero String for Argument
if [ -z "$DISTRO_NAME" ]; then
	echo "${RED}Please Specify a Distribution Name you want to install!${NOATTR}"
	exit 2
fi

case "$DISTRO_NAME" in
	bionic|ubuntu-bionic)
		DIST=bionic
		bionic
		;;
	focal|ubuntu-focal)
		DIST=focal
		focal
		;;
	groovy|ubuntu-groovy)
		DIST=groovy
		groovy
		;;
	hirsute|ubuntu-hirsute)
		DIST=hirsute
		hirsute
		;;
	buster|debian-buster)
		DIST=buster
		buster
		;;
	stretch|debian-stretch)
		DIST=stretch
		stretch
		;;
	bullseye|debian-bullseye)
		DIST=bullseye
		bullseye
		;;
	sid|unstable|debian-unstable|debian-sid)
		DIST=sid
		sid
		;;
	testing|debian-testing)
		DIST=testing
		testing
		;;
	kali|kali-rolling)
		DIST=kali
		kali
		;;
	alpine)
		DIST=alpine
		alpine
		;;
	arch|archlinux)
		DIST=archlinux
		archlinux
		;;
	list)
		list_distros
		exit 0
		;;
	*)
		echo "${RED}Unknown Distribution was requested: $DISTRO_NAME ${NOATTR}"
		exit 2
		;;
esac

### Explicitly Check for Zero String for Argument
if [ -z "$CHROOT_NAME" ]; then
	echo "${RED}Please Specify a Container Name${NOATTR}"
	exit 2
fi

### Check if the container is installed
if [ -e "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME" ]; then
	echo "${RED}The Container ${YELLOW}$CHROOT_NAME${RED} is already installed${NOATTR}"
	exit 2
fi

get_fs_image(){
	echo "${GREEN}Downloading the Image File: ${YELLOW}$DISTRO_NAME${NOATTR} "
	mkdir -p "$RLCHROOT_CACHE/$DIST" ||:
	wget --tries=5 "$WGET_URL_LINK" -O "$RLCHROOT_CACHE/$DIST/$EXPECT.part"
		if [ -e "$RLCHROOT_CACHE/$DIST/$EXPECT.part" ]; then
			mv "$RLCHROOT_CACHE/$DIST/$EXPECT.part" "$RLCHROOT_CACHE/$DIST/$EXPECT"
			DESTPATH="$RLCHROOT_CACHE/$DIST/$EXPECT"
		else
			echo "${RED}An Error has occured: no such file or directory${NOATTR}"
			exit 2
		fi
}

do_extract_filesystem(){
	DESTPATH="$RLCHROOT_CACHE/$DIST/$EXPECT"
	echo "${GREEN}Installing the rootfs ${YELLOW}$DISTRO_NAME${GREEN}. This may take some time${NOATTR}"
	mkdir "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME" -p ||:
	proot --link2symlink -0 tar --warning=no-unknown-keyword --preserve-permissions --delay-directory-restore --strip="$STRIP_TARBALL" -xf "$DESTPATH" --exclude dev -C "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME" ||:
	### Change mode to guest /proc filesystem
	chmod 700 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc" -R
}

setup_android_groups(){
	chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/passwd"
	chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/shadow"
	chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/group"
	echo "aid_$(id -un):x:$(id -u):$(id -g):Android UID:/:/usr/sbin/nologin" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/passwd"
	echo "aid_$(id -un):*:18446:0:99999:7:::" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/shadow"
		for g in $(id -G); do
			echo "aid_$(id -gn "$g"):x:${g}:root,aid_$(id -un)" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/group"
			if [ -f "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/gshadow" ]; then
				chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/gshadow"
				echo "aid_$(id -gn "$g"):*::root,aid_$(id -un)" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/gshadow"
			fi
		done
}

setup_nameserver(){
	rm -rf "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/resolv.conf"
	cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/resolv.conf" <<- EOM
	nameserver 8.8.8.8
	nameserver 8.8.4.4
	EOM
}

setup_additional(){
	if [ "$ARCHLINUX_SED" == "1" ]; then
		sed -i 's/#Server = http/Server = http/g' "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/pacman.d/mirrorlist"
	fi
	chmod 700 -R "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc"
	rm -rf "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc"
	mkdir "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc"
}

if [ "$DO_NOT_WGET" == "1" ]; then
	do_extract_filesystem
else
	get_fs_image
	do_extract_filesystem
fi

TEMPLATE_CFG="$RLCHROOT_TEMPLATES/$DIST"
### Function to run proot command for template configuration
proot_run_cmd(){
	echo "${GREEN}Performing Distro-Specific Steps${NOATTR}"
	setup_android_groups
	setup_nameserver
	setup_additional
	unset LD_PRELOAD
	proot --link2symlink --kill-on-exit --root-id --kernel-release=4.14.144-lxc --rootfs="$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME" --bind=/dev --bind=/proc --bind=/sys \
	--bind=/dev/urandom:/dev/random \
	--cwd=/root \
	/usr/bin/env -i \
	HOME=/root \
	PATH=/usr/local/bin:/usr/local/sbin:/usr/local/games:/usr/bin:/usr/sbin:/usr/games:/bin:/sbin:/opt \
	USER=root \
	LANG=C.UTF-8 \
	TERM=$TERM \
	/opt/template-config.sh
}

### Copy Template Path
install -m 755 "$TEMPLATE_CFG" "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/opt/template-config.sh"

### Setup the Distribution and indicate the success
if proot_run_cmd; then
	rm -rf "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/opt/template-config.sh" ||:
	echo
	echo "${GREEN}The container ${YELLOW}$CHROOT_NAME${GREEN} successfully installed${NOATTR}"
	touch "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/.setup_done"
	exit 0
else
	rm -rf "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/opt/template-config.sh" ||:
	echo
	echo "${RED}An Error has occured during the distro setup, please reinstall it if possible${NOATTR}"
	exit 2
fi

### END OF MESSAGE EOM
