#!/data/data/com.termux/files/usr/bin/bash
### rlc-launch - Launches the Chroot Environment
### All Rights Reserved @wmcbtech30 (2021)
###
### For Seamless Chroot, we bind host partitions and environment variables
### And syncs the environment
RLCHROOT_ROOTFS_DIR="$PREFIX/var/rlc/containers"
RLCHROOT_HOST_DISPLAY="$DISPLAY"
RLCHROOT_HOST_PULSE_SERVER="$PULSE_SERVER"
RLCHROOT_HOST_TZ="$TZ"
RLCHROOT_HOST_TERM="$TERM"
CHROOT_NAME="$1"

### Colored Environment Variables
RED="$(tput setaf 1)$(tput bold)"
GREEN="$(tput setaf 2)$(tput bold)"
YELLOW="$(tput setaf 3)$(tput bold)"
NOATTR="$(tput sgr0)"

### Check if running as root
if [ "$(whoami)" == "root" ]; then
	echo "${RED}Running ${YELLOW}rlc-launch${RED} as root is discouraged, Aborting Exit Code 2${NOATTR}"
	exit 2
fi

### Check if no argument is specified
if [ $# = 0 ] || [ $1 == "--help" ]; then
	echo "${GREEN}rlc-launch: Launch the proot environment specified the container name"
	echo ""
	echo "Usage: "
	echo "rlc-launch ${YELLOW}[CHROOT-NAME] [OPTIONAL-EXEC-CMD]${GREEN}"
	echo ""
	echo "Example Usage: "
	echo "${YELLOW}rlc-launch ubuntu-server"
	echo "rlc-launch kali-hacking"
	echo ""
	echo "${GREEN}To Pass Commands with the container, specify the command at the end"
	echo ""
	echo "Example Usage: "
	echo "${YELLOW}rlc-launch ubuntu-server apt update"
	echo "rlc-launch kali-hacking su - user${NOATTR}"
	exit 2
fi

### Explicitly Check for Zero String for Argument
if [ -z "$CHROOT_NAME" ]; then
	echo "${RED}Please Specify a Container Name to Launch${NOATTR}"
	exit 2
fi

### Check whether the container exists
if [ ! -e "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME" ]; then
    echo "${RED}WARNING: The requested container name ${YELLOW}$CHROOT_NAME${RED} isn't installed${NOATTR}"
    exit 2
fi

### Check if custom PULSE_SERVER is specified
if [ -z "$RLCHROOT_HOST_PULSE_SERVER" ]; then
	export RLCHROOT_HOST_PULSE_SERVER="127.0.0.1"
fi

### Sync Function
sync_environment(){
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/profile.d/rlchroot-env.sh" <<- EOM
#!/bin/bash
if [ -e /usr/bin/pacman ]; then
	export LANG="en_US.UTF-8"
else
	export LANG="C.UTF-8"
fi
export TMPDIR="/tmp"
export EXTERNAL_SHARED_STORAGE="/sdcard"
export MOZ_FAKE_NO_SANDBOX="1"
export PATH="/usr/local/bin:/usr/local/sbin:/usr/local/games:/usr/bin:/usr/sbin:/usr/games:/bin:/sbin"
export DISPLAY="${RLCHROOT_HOST_DISPLAY}"
export PULSE_SERVER="${RLCHROOT_HOST_PULSE_SERVER}"
export TZ="${RLCHROOT_HOST_TZ}"
export TERM="${RLCHROOT_HOST_TERM}"

if [ ! -e /etc/.hushlogin ]; then
echo ""
echo "${GREEN}Welcome to the Linux Environment"
echo ""
echo "If you want to use non-root user account, rlchroot already configures that for you"
echo "type ${YELLOW}su - user${GREEN} when logging in as normal user"
echo ""
echo "The Environment variables is synced from your host, ${YELLOW}(PULSE_SERVER, DISPLAY, TZ)${GREEN}"
echo ""
echo "If you seen this message, you have a clean install of your distro, suggesting to update your system first"
echo ""
echo "To log out from linux environment, simply type ${YELLOW}exit${NOATTR}"
echo ""
touch /etc/.hushlogin
fi
EOM
}

### Configure Stuff
config_container(){
### Add Unique PS1 (For Debian-Based Containers only)
if [ -e "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/usr/bin/apt" ]; then
echo "$CHROOT_NAME" > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/debian_chroot"
fi
### /etc/hosts
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/hosts" <<- EOM
127.0.0.1	localhost
::1			localhost
127.0.1.1	localhost.localdomain	localhost
EOM
### /etc/hostname
echo "localhost" > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/hostname"
### /etc/resolv.conf
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/resolv.conf" <<- EOM
nameserver 8.8.8.8
nameserver 8.8.4.4
EOM
### Fake the proc contents for SELinux
### /proc/stat
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc/stat" <<- EOM
cpu  3351 0 4329 1940356 125 0 996 0 0 0
cpu0 1124 0 1476 646687 109 0 284 0 0 0
intr 94785 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ctxt 479619
btime 1609489265
processes 10080
procs_running 1
procs_blocked 0
softirq 577762 0 171336 0 66201 6199 0 17922 175727 0 140377
EOM
### /proc/version
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc/version" <<- EOM
Linux version 4.14-144-lxc (oe-user@oe-host) (gcc version 8.2.0 (GCC)) #1 SMP Tue Jun 23 12:58:10 UTC 2020
EOM
### /proc/vmstat
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc/vmstat" <<- EOM
nr_free_pages 698132
nr_zone_inactive_anon 2
nr_zone_active_anon 25205
nr_zone_inactive_file 5195
nr_zone_active_file 19597
nr_zone_unevictable 0
nr_zone_write_pending 0
nr_mlock 0
nr_page_table_pages 619
nr_kernel_stack 1872
nr_bounce 0
nr_free_cma 0
nr_inactive_anon 2
nr_active_anon 25205
nr_inactive_file 5195
nr_active_file 19597
nr_unevictable 0
nr_slab_reclaimable 3475
nr_slab_unreclaimable 2748
nr_isolated_anon 0
nr_isolated_file 0
workingset_refault 0
workingset_activate 0
workingset_nodereclaim 0
nr_anon_pages 25192
nr_mapped 8760
nr_file_pages 24807
nr_dirty 0
nr_writeback 0
nr_writeback_temp 0
nr_shmem 17
nr_shmem_hugepages 0
nr_shmem_pmdmapped 0
nr_anon_transparent_hugepages 11
nr_unstable 0
nr_vmscan_write 0
nr_vmscan_immediate_reclaim 0
nr_dirtied 381
nr_written 376
nr_dirty_threshold 140577
nr_dirty_background_threshold 70203
pgpgin 100710
pgpgout 4198104
pswpin 0
pswpout 0
pgalloc_dma 0
pgalloc_dma32 9903459
pgalloc_normal 0
pgalloc_movable 0
allocstall_dma 0
allocstall_dma32 0
allocstall_normal 0
allocstall_movable 0
pgskip_dma 0
pgskip_dma32 0
pgskip_normal 0
pgskip_movable 0
pgfree 10647451
pgactivate 17414
pgdeactivate 0
pglazyfree 40
pgfault 3269849
pgmajfault 615
pglazyfreed 0
pgrefill 0
pgsteal_kswapd 0
pgsteal_direct 0
pgscan_kswapd 0
pgscan_direct 0
pgscan_direct_throttle 0
pginodesteal 0
slabs_scanned 0
kswapd_inodesteal 0
kswapd_low_wmark_hit_quickly 0
kswapd_high_wmark_hit_quickly 0
pageoutrun 0
pgrotated 0
drop_pagecache 0
drop_slab 0
oom_kill 0
pgmigrate_success 43104
pgmigrate_fail 3432
compact_migrate_scanned 1159024
compact_free_scanned 41671173
compact_isolated 92179
compact_stall 0
compact_fail 0
compact_success 0
compact_daemon_wake 0
compact_daemon_migrate_scanned 0
compact_daemon_free_scanned 0
htlb_buddy_alloc_success 0
htlb_buddy_alloc_fail 0
unevictable_pgs_culled 0
unevictable_pgs_scanned 0
unevictable_pgs_rescued 0
unevictable_pgs_mlocked 0
unevictable_pgs_munlocked 0
unevictable_pgs_cleared 0
unevictable_pgs_stranded 0
thp_fault_alloc 10865
thp_fault_fallback 0
thp_collapse_alloc 647
thp_collapse_alloc_failed 0
thp_file_alloc 0
thp_file_mapped 0
thp_split_page 2
thp_split_page_failed 0
thp_deferred_split_page 10620
thp_split_pmd 8
thp_split_pud 0
thp_zero_page_alloc 1
thp_zero_page_alloc_failed 0
thp_swpout 0
thp_swpout_fallback 0
balloon_inflate 0
balloon_deflate 0
swap_ra 0
swap_ra_hit 0
EOM
### /proc/loadavg
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc/loadavg" <<- EOM
0.02 0.01 0.00 1/116 10263
EOM
### /proc/uptime
cat > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc/uptime" <<- EOM
6758.29 20194.15
EOM
### /proc/sys/kernel/cap_last_cap
echo 0 > "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc/cap_last_cap"
}

setup_groups_if_needed(){
	chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/passwd"
	chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/shadow"
	chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/group"
	echo "aid_$(id -un):x:$(id -u):$(id -g):Android UID:/:/usr/sbin/nologin" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/passwd"
	echo "aid_$(id -un):*:18446:0:99999:7:::" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/shadow"
		for g in $(id -G); do
			echo "aid_$(id -gn "$g"):x:${g}:root,aid_$(id -un)" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/group"
			if [ -f "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/gshadow" ]; then
				chmod 4644 "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/gshadow"
				echo "aid_$(id -gn "$g"):*::root,aid_$(id -un)" >> "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/etc/gshadow"
			fi
		done
}

setup_procfiles(){
	chmod 700 -R "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc"
	rm -rf "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc"
	mkdir "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/proc"
}

### Do Quick Setup if needed (Used for custom containers)
if [ ! -e "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/.setup_done" ]; then
	setup_groups_if_needed
	setup_procfiles
	touch "$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/.setup_done"
fi

echo "${GREEN}Configuring the Container ${YELLOW}$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME${NOATTR}"
config_container
echo "${GREEN}Syncing Environment"
sync_environment

### Launch Chroot
echo "Starting the Linux Environment ${YELLOW}$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME${NOATTR}"
### unset LD_PRELOAD which it redefines termux-exec for shebangs
unset LD_PRELOAD
prootcmd="proot"
prootcmd+=" --link2symlink --kill-on-exit --root-id"
prootcmd+=" --kernel-release=4.14.144-lxc --sysvipc -L -H -p"
prootcmd+=" --rootfs=$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME"
prootcmd+=" --cwd=/root"
prootcmd+=" --bind=/dev --bind=/proc --bind=/sys"
prootcmd+=" --bind=$RLCHROOT_ROOTFS_DIR/$CHROOT_NAME/tmp:/dev/shm"

### Mountpoint Configuration can be specified, source it
source $PREFIX/var/rlc/mountpoints.conf

prootcmd+=" /usr/bin/env -i"
prootcmd+=" HOME=/root USER=root TMPDIR=/tmp"
prootcmd+=" PATH=/usr/local/bin:/usr/local/bin:/usr/local/games:/usr/bin:/usr/sbin:/usr/games:/bin:/sbin"
prootcmd+=" TERM=$TERM LANG=C.UTF-8"
extcmd="${@:2}"
### We Define the External Command
if [ -z "$extcmd" ]; then
	prootcmd+=" /bin/su -l"
else
	prootcmd+=" /usr/bin/sudo -s $extcmd"
fi

### Launch PRoot Environment
$prootcmd

### END OF MESSAGE EOM
